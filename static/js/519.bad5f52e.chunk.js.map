{"version":3,"file":"static/js/519.bad5f52e.chunk.js","mappings":"0NAEMA,EAAWC,EAAAA,GAAAA,IAAH,0VAkBRC,EAAeD,EAAAA,GAAAA,IAAH,iJ,UCbZE,EAAYC,SAASC,cAAc,eAEnCC,EAAO,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,UAEtBC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAgB,SAAAC,GACD,WAAfA,EAAMC,MAERL,GAEH,EAGD,OADAM,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,GAAC,CAACH,IASH,OAAOS,EAAAA,EAAAA,eACL,SAAChB,EAAD,CAAUiB,UAAU,UAAUC,QARJ,SAAAP,GACtBA,EAAMQ,SAAWR,EAAMS,eAEzBb,GAEH,EAGC,UACE,SAACL,EAAD,CAAce,UAAU,QAAxB,SAAiCT,MAEnCL,EAGH,C,wJC9BKkB,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAAS,oBAC5BC,MAAOJ,EAAAA,KAAaK,IAAI,EAAjB,sCAA0DC,QAAQ,GAAI,uBAAuBH,SAAS,sBAC7GI,SAAUP,EAAAA,KAAaK,IAAI,EAAjB,0CAA6DF,SAAS,0BAG5EK,EAAe,WAEnB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAEpBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbd,KAAO,GACPE,MAAO,GACPG,SAAU,IAEZU,iBAAkBlB,EAClBmB,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAEnBX,GAASY,EAAAA,EAAAA,IAASF,IAClBC,GAED,IAEH,OAEE,UAACE,EAAA,EAAD,CACEC,GAAG,OACHC,QAAQ,OACRC,QAAQ,OACRC,cAAc,SACdC,GAAG,OACHC,aAAa,MACbV,SAAUJ,EAAOe,aAPnB,WASE,UAACP,EAAA,EAAD,CAAKC,GAAG,QAAQC,QAAQ,OAAOE,cAAc,SAA7C,sBAEE,kBACEI,KAAK,OACL5B,KAAK,OACL6B,MAAOjB,EAAOK,OAAOjB,KACrB8B,SAAUlB,EAAOmB,kBAIpBnB,EAAOoB,QAAQhC,MAAQY,EAAOqB,OAAOjC,MACjC,oCAAIY,EAAOqB,OAAOjC,KAAlB,OAA8B,MACnC,UAACoB,EAAA,EAAD,CAAKC,GAAG,QAAQC,QAAQ,OAAOE,cAAc,SAA7C,mBAEE,kBACEI,KAAK,QACL5B,KAAK,QACL6B,MAAOjB,EAAOK,OAAOf,MACrB4B,SAAUlB,EAAOmB,kBAIpBnB,EAAOoB,QAAQ9B,OAASU,EAAOqB,OAAO/B,OACjC,oCAAIU,EAAOqB,OAAO/B,MAAlB,OAA+B,MACrC,UAACkB,EAAA,EAAD,CAAKC,GAAG,QAAQC,QAAQ,OAAOE,cAAc,SAA7C,sBAEE,kBACEI,KAAK,WACL5B,KAAK,WACL6B,MAAOjB,EAAOK,OAAOZ,SACrByB,SAAUlB,EAAOmB,kBAIpBnB,EAAOoB,QAAQ3B,UAAYO,EAAOqB,OAAO5B,UACrC,oCAAIO,EAAOqB,OAAO5B,SAAlB,OAAkC,MACvC,mBAAQuB,KAAK,SAAb,wBACCnB,IAAS,8BAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOyB,YAG1B,EC/EKC,EAAW,WAYf,OACE,SAACrD,EAAA,EAAD,WACE,SAACwB,EAAD,KAGL,C","sources":["components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components'\n\nconst Backdrop = styled.div`\n  position: fixed;\n  // top: 16px;\n  // top: 0;\n  // left: 0;\n  right: 16px;\n  // width: 100vw;\n  // height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  //background-color: rgba(0, 0, 0, 0.8);\n  padding: 16px;\n  border-radius: 5px;\n  outline: 1px solid red;\n  z-index: 1200;\n`\n  \nconst ModalContent = styled.div` \n  //max-width: calc(50vw - 48px);\n  //max-height: calc(50vh - 24px);\n  // max-width:50vw;\n  // max-height: 50vh;\n;\n`\n\nexport {Backdrop, ModalContent} ","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport PropTypes from 'prop-types';\n\nimport { Backdrop, ModalContent } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal =({onClose, children}) => {\n\n  useEffect(() => {\n\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        // console.log('Нажали ESC, нужно закрыть модалку');\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  },[onClose]);\n\n  const handleBackdropClick = event => {\n    if (event.target === event.currentTarget) {\n      // console.log(\"нужно закрыть модалку\");\n      onClose();\n    }\n  }\n\n  return createPortal(\n    <Backdrop className=\"Overlay\" onClick={handleBackdropClick}>\n      <ModalContent className=\"Modal\">{children}</ModalContent>\n    </Backdrop>,\n    modalRoot\n  );\n\n}\n\nModal.propTypes = {\n  onClose : PropTypes.func\n}\n\nexport { Modal }","import { useSelector, useDispatch  } from 'react-redux'\n\nimport { register } from 'redux/auth/operations'\nimport { selectError } from 'redux/auth/selectors'\n\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\n\nimport Box from \"components/Box\"\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required(\"Name is required\"),\n  email: Yup.string().min(3, `Name must be at least 3 characters`).matches(\"\", 'E-mail is not valid').required('E-mail is required'),\n  password: Yup.string().min(7,`Password must be at least 7 characters`).required('Password is required'),\n});\n\nconst RegisterForm = () => {\n\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectError);\n  \n  const formik = useFormik({\n    initialValues: {\n      name : \"\",\n      email: \"\",\n      password: \"\",\n    },\n    validationSchema: schema,\n    onSubmit: (values, { resetForm }) => {\n      // console.log(values);\n      dispatch(register(values));\n      resetForm();\n      //if (!error) resetForm();\n    }\n  })\n  return (\n    // <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n    <Box\n      as=\"form\"\n      display=\"flex\"\n      gridGap=\"16px\"\n      flexDirection=\"column\"\n      py=\"16px\"\n      autoComplete=\"off\"\n      onSubmit={formik.handleSubmit}\n    >\n      <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n        Username\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n        />\n      </Box>\n      {/* {error && error?.name && <>{error.name}</>} */}\n      {formik.touched.name && formik.errors.name ? \n           <> {formik.errors.name} </> : null}\n      <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n        Email\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n        />\n      </Box>\n      {/* {error && error?.email && <>{error.email}</>} */}\n      {formik.touched.email && formik.errors.email ? \n            <> {formik.errors.email} </> : null}\n      <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n        Password\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n        />\n      </Box>\n      {/* {error && error?.password && <>{error.password}</>} */}\n      {formik.touched.password && formik.errors.password ? \n           <> {formik.errors.password} </> : null}\n      <button type=\"submit\"> Register </button>\n      {error && <p>{error?.message}</p>}\n    </Box>\n  );\n}\n\nexport { RegisterForm }","// import { useState } from \"react\";\n// import { useSelector, useDispatch  } from 'react-redux'\n\n// import { resetError } from 'redux/auth/slice'\n\nimport Modal from \"components/Modal\"\nimport RegisterForm from \"components/RegisterForm\"\n\nconst Register = () => {\n  // const [showModal, setShowModal] = useState(false);\n\n  // const dispatch = useDispatch();\n\n  // dispatch(resetError())\n\n  // const toggleModal = () => {\n  //   console.log(\"Закрыть\");\n  //   setShowModal(prevState => !prevState)\n  // }\n\n  return (\n    <Modal> \n      <RegisterForm />\n    </Modal> \n  )\n}\n\nexport { Register as default }"],"names":["Backdrop","styled","ModalContent","modalRoot","document","querySelector","Modal","onClose","children","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","createPortal","className","onClick","target","currentTarget","schema","Yup","shape","name","required","email","min","matches","password","RegisterForm","dispatch","useDispatch","error","useSelector","selectError","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","register","Box","as","display","gridGap","flexDirection","py","autoComplete","handleSubmit","type","value","onChange","handleChange","touched","errors","message","Register"],"sourceRoot":""}