{"version":3,"file":"static/js/519.6225c6fb.chunk.js","mappings":"0PAeMA,EAAe,WAEnB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAEpBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAO,GACPC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAACC,EAAD,GAA2B,EAAhBC,UAEnBb,GAASc,EAAAA,EAAAA,IAASF,GAEnB,IAEH,OAEE,UAACG,EAAA,EAAD,CACEC,GAAG,OACHC,QAAQ,OACRC,QAAQ,OACRC,cAAc,SACdC,GAAG,OACHC,aAAa,MACbV,SAAUN,EAAOiB,aAPnB,WASE,UAACP,EAAA,EAAD,CAAKC,GAAG,QAAQC,QAAQ,OAAOE,cAAc,SAA7C,sBAEE,kBACEI,KAAK,OACLf,KAAK,OACLgB,MAAOnB,EAAOO,OAAOJ,KACrBiB,SAAUpB,EAAOqB,kBAGpBxB,IAAK,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOM,QAAQ,8BAAGN,EAAMM,QAClC,UAACO,EAAA,EAAD,CAAKC,GAAG,QAAQC,QAAQ,OAAOE,cAAc,SAA7C,mBAEE,kBACEI,KAAK,QACLf,KAAK,QACLgB,MAAOnB,EAAOO,OAAOH,MACrBgB,SAAUpB,EAAOqB,kBAGpBxB,IAAK,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOO,SAAS,8BAAGP,EAAMO,SACnC,UAACM,EAAA,EAAD,CAAKC,GAAG,QAAQC,QAAQ,OAAOE,cAAc,SAA7C,sBAEE,kBACEI,KAAK,WACLf,KAAK,WACLgB,MAAOnB,EAAOO,OAAOF,SACrBe,SAAUpB,EAAOqB,kBAGpBxB,IAAK,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOQ,YAAY,8BAAGR,EAAMQ,YACtC,mBAAQa,KAAK,SAAb,wBACCrB,IAAS,8BAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOyB,YAG1B,ECtEKC,EAAW,WAYf,OAEI,SAAC7B,EAAD,GAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useSelector, useDispatch  } from 'react-redux'\n\nimport { register } from 'redux/auth/operations'\nimport { selectError } from 'redux/auth/selectors'\n\nimport { useFormik } from \"formik\"\n\nimport Box from \"components/Box\"\n\n// const RegisterForm = () => {\n//   return (\n//     <Box as=\"label\" width=\"100%\" height=\"100%\" bg=\"white\"> Register Form </Box>\n//   )\n// }\n\nconst RegisterForm = () => {\n\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectError);\n  \n  const formik = useFormik({\n    initialValues: {\n      name : \"\",\n      email: \"\",\n      password: \"\",\n    },\n    onSubmit: (values, { resetForm }) => {\n      // console.log(values);\n      dispatch(register(values));\n      //if (!error) resetForm();\n    }\n  })\n  return (\n    // <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n    <Box\n      as=\"form\"\n      display=\"flex\"\n      gridGap=\"16px\"\n      flexDirection=\"column\"\n      py=\"16px\"\n      autoComplete=\"off\"\n      onSubmit={formik.handleSubmit}\n    >\n      <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n        Username\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n        />\n      </Box>\n      {error && error?.name && <>{error.name}</>}\n      <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n        Email\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n        />\n      </Box>\n      {error && error?.email && <>{error.email}</>}\n      <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n        Password\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n        />\n      </Box>\n      {error && error?.password && <>{error.password}</>}\n      <button type=\"submit\"> Register </button>\n      {error && <p>{error?.message}</p>}\n    </Box>\n  );\n}\n\nexport { RegisterForm }","// import { useState } from \"react\";\n// import { useSelector, useDispatch  } from 'react-redux'\n\n// import { resetError } from 'redux/auth/slice'\n\n// import Modal from \"components/Modal\"\nimport RegisterForm from \"components/RegisterForm\"\n\nconst Register = () => {\n  // const [showModal, setShowModal] = useState(false);\n\n  // const dispatch = useDispatch();\n\n  // dispatch(resetError())\n\n  // const toggleModal = () => {\n  //   console.log(\"Закрыть\");\n  //   setShowModal(prevState => !prevState)\n  // }\n\n  return (\n    // <Modal onClose={toggleModal}> \n      <RegisterForm />\n    // </Modal> \n  )\n}\n\nexport { Register as default}"],"names":["RegisterForm","dispatch","useDispatch","error","useSelector","selectError","formik","useFormik","initialValues","name","email","password","onSubmit","values","resetForm","register","Box","as","display","gridGap","flexDirection","py","autoComplete","handleSubmit","type","value","onChange","handleChange","message","Register"],"sourceRoot":""}